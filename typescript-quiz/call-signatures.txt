# Call signature
    is the type of the arguments and return value of a function
    A call signature doesn't have the implementation of the funciton
    Call signatures will not be complied into JS
    We can use the same call signature for multiple functions


#Overloading
    오버로딩은 하나의 함수가 여러 개의 콜 시그니처를 가질 때 일어납니다.
    오버로딩은 다른 arguments 타입을 받아들여야 할 때 사용합니다.


# Types

    Tuples
        튜플은 배열의 길이가 고정되고 각 요소의 타입이 지정되어 있는 배열 형식을 의미합니다.
        (출처 - 타입스크립트 핸드북 https://joshua1988.github.io/ts/guide/basic-types.html#tuple)
        Use this to specify an array with a minLength and type positions
    
    any
        any 타입은 모든 타입을 허용하므로, any를 사용하면 타입스크립트의 보호막에서 벗어나게 됩니다.
        따라서 가급적 사용하지 않을 것을 추천합니다.
        여러 가지 타입이 될 수 있다면 제네릭 등을 사용할 수 있습니다.
        ex.
        function logText(text: any): any {
            return text;
        }

        function logText<T>(text:T) : T {
            return text;
        }
        (출처 - 타입스크립트 핸드북 https://joshua1988.github.io/ts/guide/generics.html#%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85-%EB%B3%80%EC%88%98)

    unknown
        전달인자(argument) 등의 타입을 알 수 없을 때 사용하는 타입
        unknown을 사용하게 된다면, unknown에 받을 수 있는 타입에 대해 체크하고 넘어가야 합니다.

    void
        반환 값이 없는 함수의 반환 타입.
        return이 없거나 return이 있더라도 반환하는 값이 없습니다.

    never 
        - 리턴하지 않는 함수 (e.g. 함수 내용에 while(true){}가 들어 있는 경우)
        - 항상 예외를 던지는 함수 (e.g. function foo(){throw new Error('Not Implemented')} 에서 foo의 리턴 타입이 never)
        파일 시간의 빠짐없는 검사 목적으로 사용할 수 있습니다
        (출처 TypeScript Deep Dive https://radlohead.gitbook.io/typescript-deep-dive/type-system/never)

# Class
    Type Alias 타입 별칭
        타입 별칭은 특정 타입이나 인터페이스를 참조할 수 있는 타입 변수를 의미합니다.
        (출처 - 타입스크립트 핸드북 https://joshua1988.github.io/ts/guide/type-alias.html)

    readonly 
        DOES NOT COMPILE to JS
        TypeScript의 타입 시스템은 인터페이스 속성을 readonly (읽기 전용)으로 지정할 수 있게 해줍니다. 이를 통해 함수형 방식이 가능해집니다 
        (출처 - TypeScript Deep Dive https://radlohead.gitbook.io/typescript-deep-dive/type-system/readonly)
    